<?php
declare(strict_types = 1);
namespace mobileWeb\modules\api\modules\courseware\controllers;

use common\components\WebDataCache;
use common\models\dicmodels\ChapterInfoModel;
use common\models\dicmodels\EditionModel;
use common\models\dicmodels\SubjectModel;
use common\clients\material\ChapterService;
use common\clients\UserService;
use frontend\components\helper\ImagePathHelper;
use mobileWeb\components\HttpAndCookiesBearerAuth;
use mobileWeb\controllers\RestfulBaseController;
use stdClass;
use Yii;
use yii\web\BadRequestHttpException;

/**
 * Created by PhpStorm.
 * User: liuxing
 * Date: 17-10-11
 * Time: 下午6:31
 */
class ChapterController extends RestfulBaseController
{
    public function behaviors()
    {
        $arr1 = parent::behaviors(); // TODO: Change the autogenerated stub
        $arr2 = [
            'authenticator' => [
                'class' => HttpAndCookiesBearerAuth::className(),
                'optional' => [
                    'version',
                    'index',
                    'version',
                    'tome'
                ],
            ]
        ];

        return array_merge($arr1,$arr2);
    }

    /**
     * 章节列表
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionIndex()
    {
        $departmentId = (int)Yii::$app->request->get('department-id', 0);
        $subjectId = (int)Yii::$app->request->get('subject-id', 0);
        $versionId = (int)Yii::$app->request->get('version-id', 0);
        $tomeId = (int)Yii::$app->request->get('tome-id', 0);
        if ($departmentId == 0 || $subjectId == 0 || $versionId == 0 || $tomeId == 0) {
            throw new BadRequestHttpException("参数不正确");
        }

        $chapterService = new ChapterService();
        $chapterResult = $chapterService->chapter($departmentId, $subjectId, $versionId, $tomeId);
        if ($chapterResult->code != 200) {
            return [];
        }
        $chapterList = $chapterResult->body;

        $chapterArray = array();
        if (count($chapterList) > 1) {
            $chapterFirst = array_shift($chapterList);
            $chapterInfoModel = new  ChapterInfoModel();
            $chapterArray = $chapterInfoModel->treeChapter($chapterList, $chapterFirst->id);
        }

        return $chapterArray;
    }


    /**
     * 某个学部学科下的版本
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionVersion()
    {
        $departmentId = (int)Yii::$app->request->get('department-id', 0);
        $subjectId = (int)Yii::$app->request->get('subject-id', 0);
        if ($departmentId == 0 || $subjectId == 0) {
            throw new BadRequestHttpException("参数不正确");
        }

        $chapterService = new ChapterService();
        $versionResult = $chapterService->version($departmentId, $subjectId);

        $versionArray = array();

        if ($versionResult->code == 200) {
            $versionList = $versionResult->body;

            foreach ($versionList as $version) {
                $versionInfo = new stdClass();
                $versionInfo->versionId = (int)$version->secondCode;
                $versionInfo->versionName = $version->secondCodeValue;
                array_push($versionArray, $versionInfo);
            }
        }

        return $versionArray;
    }


    /**
     * 某个版本下的分册
     * @return array
     * @throws BadRequestHttpException
     */
    public function actionTome()
    {
        $departmentId = (int)Yii::$app->request->get('department-id', 0);
        $subjectId = (int)Yii::$app->request->get('subject-id', 0);
        $versionId = (int)Yii::$app->request->get('version-id', 0);
        if ($departmentId == 0 || $subjectId == 0 || $versionId == 0) {
            throw new BadRequestHttpException("参数不正确");
        }

        $chapterService = new ChapterService();

        $tomeResult = $chapterService->tome($departmentId, $subjectId, $versionId);
        $tomeList = [];
        if ($tomeResult->code == 200) {
            $tomeList = $tomeResult->body;
            foreach ($tomeList as $tome) {
                $tome->image = ImagePathHelper::imgThumbnail($tome->image, 200, 280);
            }

        }

        return $tomeList;
    }


    /**
     * 查询用户的默认信息
     * @return string
     */
    public function actionGetUserDefault()
    {
        $userId = user()->id;
        $userService = new UserService();
        $userDefault = $userService->getTeacherBookVersion($userId);
        if ($userDefault->code != 200) {
            Yii::error("获取用户默认版本失败，用户id:" . $userId, "app");
            return null;
        }
        $data = $userDefault->body;
        if ($data != null) {
            $data->tomeName = ChapterInfoModel::tomeName((int)$data->tome);
            $data->departmentName = WebDataCache::getDictionaryName($data->department);
            $data->versionName = EditionModel::model()->getName($data->version);
            $data->subjectName = SubjectModel::model()->getName($data->subjectId);
        }
        return $data;
    }


    /**
     * 保存用户的默认信息
     * @return bool
     * @throws BadRequestHttpException
     */
    public function actionSaveUserDefault()
    {
        $departmentId = (int)Yii::$app->request->post('department-id', 0);
        $subjectId = (int)Yii::$app->request->post('subject-id', 0);
        $versionId = (int)Yii::$app->request->post('version-id', 0);
        $tomeId = (int)Yii::$app->request->post('tome-id', 0);
        if ($departmentId == 0 || $subjectId == 0 || $versionId == 0 || $tomeId == 0) {
            throw new BadRequestHttpException("参数不正确");
        }
        $userId = user()->id;
        $userService = new UserService();
        $userDefault = $userService->saveTeacherBookVersion($userId, $subjectId, $versionId, $departmentId, $tomeId);

        if ($userDefault->code != 200) {
            Yii::error("保存用户默认版本失败，用户id:" . $userId, "app");
            throw new BadRequestHttpException("保存用户默认版本失败");
        }

        return true;
    }
}